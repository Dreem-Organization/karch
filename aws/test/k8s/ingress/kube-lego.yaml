# Note: kube-lego fetches certificates from Let's Encrypt for you ingress
# domains automatically... however, we wouldn't recommend using it for
# production-critical workloads, unless you really don't want to pay for a
# wildcard certificate...
# ---

# ServiceAccount and Roles
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-lego
  namespace: ingress
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: kube-lego
rules:
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - create
  - update
  - delete
  - patch
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - get
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kube-lego
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-lego
subjects:
  - kind: ServiceAccount
    name: kube-lego
    namespace: ingress
---

# The actual lego deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-lego
  namespace: ingress
spec:
  template:
    metadata:
      labels:
        app: kube-lego
    spec:
      serviceAccountName: kube-lego
      nodeSelector:
        duty: intake
      containers:
      - name: kube-lego
        image: jetstack/kube-lego:canary
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: LEGO_EMAIL
          value: "karch-tests-01@mailinator.com"
        - name: LEGO_URL
          value: "https://acme-v01.api.letsencrypt.org/directory"
        - name: LEGO_NAMESPACE
          value: ingress
        - name: LEGO_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 1
