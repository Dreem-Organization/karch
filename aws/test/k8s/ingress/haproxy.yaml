apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-ingress-controller
  namespace: ingress
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: haproxy-ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-controller
  namespace: ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - create
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: haproxy-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy-ingress-controller
subjects:
  - kind: ServiceAccount
    name: haproxy-ingress-controller
    namespace: ingress
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: haproxy-ingress-controller
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: haproxy-ingress-controller
  namespace: ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: haproxy-ingress-controller
subjects:
  - kind: ServiceAccount
    name: haproxyingress-controller
    namespace: ingress
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: haproxy-ingress-controller
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: haproxy-ingress-controller
  namespace: ingress
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: haproxy-ingress-controller
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: haproxy-ingress-controller
  namespace: ingress
data:
  max-connections: "200000"
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: haproxy-ingress-controller
  namespace: ingress
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: haproxy-ingress-controller
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 60
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: haproxy-ingress
  namespace: ingress
  labels:
    app: haproxy-ingress-controller
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  selector:
    matchLabels:
      app: haproxy-ingress-controller
  template:
    metadata:
      labels:
        app: haproxy-ingress-controller
    spec:
      nodeSelector:
        duty: intake
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - haproxy-ingress-controller
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
      serviceAccountName: haproxy-ingress-controller
      containers:
      - name: haproxy-ingress
        image: quay.io/jcmoraisjr/haproxy-ingress
        args:
        - --default-backend-service=$(POD_NAMESPACE)/default-backend
        - --configmap=$(POD_NAMESPACE)/haproxy-ingress-controller
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: stat
          containerPort: 1936
        resources:
          limits:
            memory: 1000Mi
          requests:
            cpu: 400m
            memory: 1000Mi
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10253
            scheme: HTTP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10253
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5

        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
